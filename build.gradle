plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.1-SNAPSHOT" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

def loadProperties(filename) {
    def props = new Properties()
    file(filename).withInputStream {
        props.load(it)
    }
    return props
}

ext.info = loadProperties("$rootDir/info.properties")

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = info.archives_base_name
    version = info.mod_version + "-" + rootProject.minecraft_version
    group = info.maven_group

    repositories {
        maven { url = "https://maven.fabricmc.net/" }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release.set(8)
    }

    tasks.withType(JavaExec).configureEach {
        it.javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    }

    java {
        withSourcesJar()
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        implementation(rootProject) {
            exclude group: "net.fabricmc", module: "fabric-loader"
            //exclude group: "com.mojang", module: "minecraft"
        }

        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        // mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"

        subprojects.each {
            //print it.path
            include project(it.path)
        }

        implementation 'org.yaml:snakeyaml:2.0'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }

        repositories {
        }
    }
}

def targetJavaVersion = 8
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = targetJavaVersion

    options.release = 8
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release = 8
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
    from("LICENSE") {
        rename { "${it}_${rootProject.archivesBaseName}" }
    }
}